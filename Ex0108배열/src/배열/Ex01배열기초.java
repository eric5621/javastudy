package 배열;

public class Ex01배열기초 {

	public static void main(String[] args) {

		// 배열(Array)의 자료구조
		// : 같은 타입의 여러 변수를 하나의 묶음으로 다루는 자료구조
		
		// 배열의 특징
		// 1. 같은 자료형만 저장할 수 있다.
		// 2. 인덱스 번호를 가지고 있다.
		// 	  인덱스 번호는 0번부터 시작해서 차례로 1씩 증가한다.
		// 3. 배열은 크기가 고정적이다.
		
		// 배열 선언하는 방법
		// 자료형[] 변수명 = new 자료형[0]
		int[] numbers = new int[5]; // 선언한 곳에만 수정이 가능하다.
		System.out.println(numbers);
		// [ : 배열 @ : 주소값(참조한다의 개념을 가지고 있다.) -> 다섯자짜리 배열이 등장한다.(index)
		// numbers ----> 5칸짜리 배열이 어디 있는지 주소값을 참조하는 레퍼런스 변수
		
		// new ---> 레퍼런스 변수를 생성하는 키워드
		// 변수명을 담은 공간을 stack이라고 한다. 차곡차곡 하나씩 쌓인다.
		// 자료형 배열을 담은 공간을 heap이라고 하는 넓은 영역에 담는다. 찾기가 힘들다. 아무 공간이나 할당된다.
		
		// 주소값이라는 개념이 왜 등장했나요?
		// : 자바에서는 데이터를 저장할 수 있는 공간이 분리되어 있다.
		// --> 서로 다른 저장공간에 있는 데이터를 불러오기 위해서는
		// 	해당하는 데이터가 어디에 저장되어 있는지 주소값이 필요!
		
		// heap는 gc라는 기능을 사용하여 필요없는 데이터를 지운다.
		
		// 1) 스택(Stack)영역
		// : 비교적 작은 양의 데이터를 저장하는 공간
		// 2) 힙(Heap) 영역
		// : 커다랗고, 복잡한 데이터를 저장하는 공간
		// --> Garbage Collector(GC)라는 기능이 있어서
		// 		주기적으로 필요없는 데이터들을 저장해준다.
		
		// 배열 안에 데이터를 저장하는 방법
		// --> 정확하게 방번호(인덱스)를 지정한 후에 저장
		
		// 배열에 2번째 칸에 15라는 값을 넣겠다.
		numbers[1] = 15;
		System.out.println(numbers[1]);
		
		numbers[5] = 20; 
		// index를 초과하면 문법적으로는 문제가 되지 않지만 에러가 발생
		
		
		
		
		
		
		
		
		
	}

}
